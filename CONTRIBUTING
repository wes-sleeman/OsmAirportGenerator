# OSM Airport Generator Contributor Guidelines  
Thank you for your interest in contributing to our project! Any contributions you make will be
included in our public releases. By contributing to this project, you agree to have your edits
published under our existing license policy (see
[LICENSE](https://github.com/wes-sleeman/OsmAirportGenerator/blob/master/LICENSE)) and to waive all
claims to ownership, trademark, copyright, or patent for them.  

## New Contributor Guidelines  
To get started, [fork the repository](https://github.com/wes-sleeman/OsmAirportGenerator/fork),
ensure you have an installed .NET SDK at version 9.0 or higher, and open the solution file in your
favourite C# code editor (we use
[Visual Studio 2022](https://visualstudio.microsoft.com/vs/community/)). Read the existing code and
get a sense for how everything works. Make your changes, push them, and
[file a pull request](https://github.com/wes-sleeman/OsmAirportGenerator/pulls) to get your changes
reviewed.

## Code Structure  
All code lives in the `OsmAirportGenerator` directory. There are four code files of interest:
* `Program.cs` is the entrypoint; it uses [C#'s top level statements feature](https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/top-level-statements).
    * It checks for a configuration file (`config.json`) and loads it if it exists.
    * It enforces acceptance of the terms of use.
    * It takes user input.
    * It queries [Overpass](https://overpass-turbo.eu/) to get necessary data.
    * It creates a temporary folder for generator output.
    * It determines which generators should be run and calls them.
    * It collates and packages generator output files.
* `Generators.cs` contains the actual generators.
    * A generator is a method that converts Overpass data into Aurora-readable files.
    * Generators are run sequentially and relevant outputs are concatenated in order.
    * Generators are responsible for filtering the full Overpass data into just the information they need.
* `Utils.cs` contains helper methods that keep the other files readable.
    * Each helper method uses [C# documentation comments](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/documentation-comments) to describe its behaviour.
    * Many of these methods are [extension methods](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods).
* `Config.cs` contains the schema for the `config.json` files.

## Style Requirements
Style requirements are contained in the `.editorconfig` file which is automatically detected and
applied by most C# code editors. In Visual Studio, use `CTRL + K, CTRL + E` to enforce style on the
current file.  
